//C++
// Pin Definitions
#define ROW_1 7
#define ROW_2 6
#define ROW_3 5
#define ROW_4 4
#define ROW_5 3
#define ROW_6 2
#define COL_1 A5
#define COL_2 A4
#define COL_3 A3
#define COL_4 A2
#define COL_5 A1
#define COL_6 A0

// 6x6 Eye shape pattern
byte eyePattern[6][6] = {
  { 1, 0, 0, 0, 0, 1 },
  { 1, 0, 1, 1, 0, 1 },
  { 0, 0, 0, 0, 0, 0 },
  { 0, 0, 0, 0, 0, 0 },
  { 1, 0, 1, 1, 0, 1 },
  { 1, 0, 0, 0, 0, 1 }
};

void setup() {
  // Set pin modes for rows as OUTPUT
  pinMode(ROW_1, OUTPUT);
  pinMode(ROW_2, OUTPUT);
  pinMode(ROW_3, OUTPUT);
  pinMode(ROW_4, OUTPUT);
  pinMode(ROW_5, OUTPUT);
  pinMode(ROW_6, OUTPUT);

  // Set pin modes for columns as OUTPUT
  pinMode(COL_1, OUTPUT);
  pinMode(COL_2, OUTPUT);
  pinMode(COL_3, OUTPUT);
  pinMode(COL_4, OUTPUT);
  pinMode(COL_5, OUTPUT);
  pinMode(COL_6, OUTPUT);
}

void loop() {
  // Display the eye pattern
  for (int row = 0; row < 6; row++) {
    // Activate the current row
    activateRow(row);

    // Display the pattern for the current row
    for (int col = 0; col < 6; col++) {
      digitalWrite(getColumnPin(col), eyePattern[row][col]);
    }

    // Delay to show the pattern
    delay(1);
  }
}

// Function to activate the specified row
void activateRow(int row) {
  digitalWrite(ROW_1, row == 0);
  digitalWrite(ROW_2, row == 1);
  digitalWrite(ROW_3, row == 2);
  digitalWrite(ROW_4, row == 3);
  digitalWrite(ROW_5, row == 4);
  digitalWrite(ROW_6, row == 5);
}

// Function to get the pin for the specified column
int getColumnPin(int col) {
  switch (col) {
    case 0: return COL_1;
    case 1: return COL_2;
    case 2: return COL_3;
    case 3: return COL_4;
    case 4: return COL_5;
    case 5: return COL_6;
    default: return -1; // Invalid column
  }
}
